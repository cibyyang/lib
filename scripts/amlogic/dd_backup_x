#!/bin/bash
# Author: xXx
# Purpose: Automate the process of backing up internal storage.
# Date: 4 Jan 2017 20:22:00 EET
###############################################################################
# Update: 5 Jan 2017 19:48:00 EET                                             #
# Reason: Added support for when the user have started his machine            #
# from USB. Now the right source and destination should be selected.          #
# Added support for uncompressed images.                                      #
# Added detection if the user runs already from emmc.                         #
###############################################################################
# Update: 6 Jan 2017 21:43:00 EET                                             #
# Reason: Added functionality to restore images that this program creates.    #
###############################################################################
_r=$(tput bold && tput setaf 1)
_g=$(tput bold && tput setaf 2)
_b=$(tput bold && tput setaf 4)
_y=$(tput bold && tput setaf 3)
_x=$(tput sgr0)
OUTDIR="/root"
dobackup(){
echo $_y" DO YOU WANT COMPRESSION ? "$_x
while true
read -p " "$_b"YES=("$_y"y"$_b") NO=("$_y"n"$_b")"$_x" " yn
do
case $yn in
y)
COMPRESS=TRUE
break;;
n)
COMPRESS=FALSE
break;;
*)
;;
esac
done
if [ "$COMPRESS" = "TRUE" ];then
echo "$_b SAVING AND COMPRESSING "$_g"$emmc"$_b" TO "$_g"$OUTDIR/$image.gz"$_x"..."
dd if=/dev/$emmc | pv -s $intsize"K" | gzip > $OUTDIR/$image.gz
finish
else
echo "$_b SAVING "$_g"$emmc"$_b" TO "$_g"$OUTDIR/$image"$_x"..."
dd if=/dev/$emmc | pv -s $intsize"K" | dd of=$OUTDIR/$image
finish
fi
}
dorestore(){
echo $_y" DID YOU USED COMPRESSION WHEN YOU TOOK THE BACKUP ? "$_x
while true
read -p " "$_b"YES=("$_y"y"$_b") NO=("$_y"n"$_b")"$_x" " yn
do
case $yn in
y)
COMPRESS=TRUE
break;;
n)
COMPRESS=FALSE
break;;
*)
;;
esac
done
if [ "$COMPRESS" = "TRUE" ];then
[ ! -f $OUTDIR/$image.gz ] && echo "$_r NO IMAGE FOUND. MAKE SURE YOU HAVE MADE A BACKUP FIRST."$_x"" && exit 1
echo "$_y YOU ARE ABOUT TO MAKE SERIOUS CHANGES TO YOUR SYSTEM!!!"
echo " FILE "$_g"$OUTDIR/$image.gz"$_y" IS GOING TO BE WRITEN TO "$_g"$emmc"$_y" "
echo " MAKE SURE EVERYTHING IS OK AND:"
read -p " PRESS ENTER TO CONTINUE OR CTRL+C TO CANCEL $_x" blah
echo $_b" RESTORING $OUTDIR/$image.gz TO /dev/$emmc | PLEASE WAIT..."$_x
#echo " SOME MUMBO JUMBO APPEARS HERE..."
gunzip -c $OUTDIR/$image.gz | pv -s $intsize"K" | dd of=/dev/$emmc
finish
else
[ ! -f $OUTDIR/$image ] && echo "$_r NO IMAGE FOUND. MAKE SURE YOU HAVE MADE A BACKUP FIRST."$_x"" && exit 1
echo "$_y YOU ARE ABOUT TO MAKE SERIOUS CHANGES TO YOUR SYSTEM!!!"
echo " FILE "$_g"$OUTDIR/$image"$_y" IS GOING TO BE WRITEN TO "$_g"$emmc"$_y" "
echo " MAKE SURE EVERYTHING IS OK AND:"
read -p " PRESS ENTER TO CONTINUE OR CTRL+C TO CANCEL $_x" blah
echo $_b" RESTORING $OUTDIR/$image TO /dev/$emmc | PLEASE WAIT..."$_x
#echo " SOME MUMBO JUMBO APPEARS HERE..."
dd if=$OUTDIR/$image | pv -s $intsize"K" | dd of=/dev/$emmc
finish
fi
}
finish(){
echo "$_g JOB FINISHED!"$_x""
}
[ $(whoami) != root ] && echo "$_r Please run this program as root""$_x" && exit 1
avail=$(lsblk | grep -oE '(mmcblk[0-9]|sda[0-9])' | sort | uniq)
runfrom=$(lsblk | grep /$ | grep -oE '(mmcblk[0-9]|sda[0-9])')
[ "$runfrom" = "" ] && echo "$_r UNABLE TO FIND ROOT OF THE RUNNING SYSTEM!!! $_x" && exit 1
emmc=$(echo $avail | sed "s/$runfrom//" | sed "s/sd[a-z][0-9]//g" | sed "s/ //g")
[ "$emmc" = "" ] && echo "$_r UNABLE TO FIND YOUR EMMC DRIVE!!! $_x" && exit 1
[ "$(echo $emmc | grep mmcblk)" = "" ] && echo "$_r YOU DO NOT APPEAR TO HAVE AN EMMC DRIVE!!! $_x" && exit 1
intsize=$(fdisk -s /dev/$emmc)
rootfree=$(df | grep /$ | awk '{print $4}')
image=$(echo $(cat /proc/cpuinfo | egrep '(Hardware|Revision)' | awk '{print $3}') | sed "s/ /-/g")-emmc.img
echo "$_b AVAILABLE DEVICES: "$_g"$(echo $avail)""$_x"
echo "$_b YOU ARE RUNNING "$_g"$(lsb_release -c | awk '{print $2}')"$_b" FROM "$_g"$runfrom""$_x"
echo -e "$_b INTERNAL EMMC IS: "$_g"$emmc"$_b" SIZE: "$_g"$intsize""$_x"
echo -e "$_b ROOT ($runfrom) FREE SPACE IS:\t"$_g"$rootfree""$_x"
[ $rootfree -le $intsize ] && echo "$_r NOT ENOUGH FREE SPACE!!! $_x" && exit 1
[ $runfrom = $emmc ] && echo "$_r YOU ARE RUNNING ALREADY FROM EMMC!!! $_x" && exit 1
echo "$_y DO YOU WANT TO BACKUP OR RESTORE ? "$_x""
while true
read -p " "$_b"BACKUP=("$_y"b"$_b") RESTORE=("$_y"r"$_b")"$_x" " br
do
case $br in
b)
dobackup
break;;
r)
dorestore
break;;
*)
;;
esac
done
